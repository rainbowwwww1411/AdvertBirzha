import database.requests as rq
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.utils.deep_linking import decode_payload
from aiogram.types import CallbackQuery, Message
from states import get
import inlineKeyboards.startikb as ikb

srouter = Router()

@srouter.message(CommandStart())
async def start(message: Message, state: FSMContext):
    if message.text == '/start':
        await rq.set_user(message.from_user.id, 'None')
    else:
        invatitefrom = decode_payload(message.text.split(' ')[1])
        new_if = f"{invatitefrom}"
        await rq.set_user(message.from_user.id, new_if)
    user_data = await rq.get_user(message.from_user.id)
    for user in user_data:
        if user.name == 'None':
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è/–ø—Å–µ–≤–¥–æ–Ω–∏–º (–Ω–µ –±–æ–ª–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤, –∞ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –±–∞–Ω –∑–∞ –º–∞—Ç/—Ä—É–≥–∞–Ω—å –∏ —Ç.–¥.):")
            await state.set_state(get.name)
        else:
            await message.answer("üöÄ")
            await message.answer("–ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∫–ª–∞–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º.\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –≤—Å—Ç—É–ø–∞–π—Ç–µ –≤ –Ω–∞—à —á–∞—Ç.", reply_markup=await ikb.start())

@srouter.message(get.name)
async def getname(message: Message, state: FSMContext):
    if len(message.text) <=30:
        await rq.upd_name(message.from_user.id, message.text)
        await state.clear()
        await message.answer("üöÄ")
        await message.answer("–ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∫–ª–∞–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º.\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –≤—Å—Ç—É–ø–∞–π—Ç–µ –≤ –Ω–∞—à —á–∞—Ç.", reply_markup=await ikb.start())
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è/–ø—Å–µ–≤–¥–æ–Ω–∏–º (–Ω–µ –±–æ–ª–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤, –∞ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –±–∞–Ω –∑–∞ –º–∞—Ç/—Ä—É–≥–∞–Ω—å –∏ —Ç.–¥.):")
        await state.set_state(get.name)
        
@srouter.callback_query(F.data=="to_main")
async def to_main(callback: CallbackQuery):
    await callback.message.edit_text("–ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∫–ª–∞–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º.\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –≤—Å—Ç—É–ø–∞–π—Ç–µ –≤ –Ω–∞—à —á–∞—Ç.", reply_markup=await ikb.start())