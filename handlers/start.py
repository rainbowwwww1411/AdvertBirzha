import database.requests as rq
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.utils.deep_linking import decode_payload
from aiogram.types import CallbackQuery, Message
from states import get
import inlineKeyboards.startikb as ikb
import keyboards.startkb as kb
from function.antiflood import AntiFloodMiddleware
import random
from function.captcha import emoji_db, all_emoji, CAPTCHA_SIZE, captcha_store, TIMEOUT
import time
from aiogram.utils.keyboard import InlineKeyboardBuilder

srouter = Router()
srouter.message.middleware(AntiFloodMiddleware())

@srouter.message(CommandStart())
async def start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    check_user = await rq.check_user(user_id)
    await state.clear()
    if not check_user:
        await state.update_data(message_text=message.text)
        category = random.choice(list(emoji_db.keys()))
        correct_emoji = random.choice(emoji_db[category])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        other_emojis = random.sample(
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å–º–∞–π–ª—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            [e[1] for e in all_emoji if e[0] != category],  # e[1] - —Å–∞–º —ç–º–æ–¥–∑–∏
            CAPTCHA_SIZE - 1
        )

        variants = [correct_emoji] + other_emojis  # –¢–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏!
        random.shuffle(variants)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        for emoji in variants:  # –¢–µ–ø–µ—Ä—å emoji - —Å—Ç—Ä–æ–∫–∞ —Å —ç–º–æ–¥–∑–∏
            builder.button(text=emoji, callback_data=f"captcha_{emoji}")

        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        builder.adjust(3, 3)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        captcha_store[user_id] = (correct_emoji, time.time())
        
        await message.answer(
            f"üîê <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç!</b>\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ: <i>{category}</i>",
            reply_markup=builder.as_markup()
        )
    else:
        user_data = await rq.get_user(user_id)
        for user in user_data:
            if user.name != 'None':
                await message.answer("üöÄ")
                await message.answer("–ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∫–ª–∞–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º.\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –≤—Å—Ç—É–ø–∞–π—Ç–µ –≤ –Ω–∞—à —á–∞—Ç.", reply_markup=kb.start(user_id))
            else:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è/–ø—Å–µ–≤–¥–æ–Ω–∏–º (–Ω–µ –±–æ–ª–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤, –∞ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –±–∞–Ω –∑–∞ –º–∞—Ç/—Ä—É–≥–∞–Ω—å –∏ —Ç.–¥.):")
                await state.set_state(get.name)
                
        
@srouter.callback_query(F.data.startswith("captcha_"))
async def check_captcha(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    selected_emoji = callback.data.split("_")[1]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–∞–ø—á–∏
    if user_id not in captcha_store:
        await callback.answer("–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º-–∞—É—Ç–∞
    correct_emoji, timestamp = captcha_store[user_id]
    if time.time() - timestamp > TIMEOUT:
        del captcha_store[user_id]
        await callback.answer("–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if selected_emoji != correct_emoji:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
        return
    data = await state.get_data()
    del captcha_store[user_id]
    if data['message_text'] == '/start':
        await rq.set_user(user_id, 'None')
    else:
        invatitefrom = decode_payload(data['message_text'].split(' ')[1])
        new_if = f"{invatitefrom}"
        await rq.set_user(user_id, new_if)
    user_data = await rq.get_user(user_id)
    for user in user_data:
        if user.name == 'None':
            await callback.message.edit_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∫–∞–ø—á—É!\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è/–ø—Å–µ–≤–¥–æ–Ω–∏–º (–Ω–µ –±–æ–ª–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤, –∞ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –±–∞–Ω –∑–∞ –º–∞—Ç/—Ä—É–≥–∞–Ω—å –∏ —Ç.–¥.):")
            await state.set_state(get.name)
        else:
            await callback.message.answer("üöÄ")
            await callback.message.answer("–ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∫–ª–∞–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º.\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –≤—Å—Ç—É–ø–∞–π—Ç–µ –≤ –Ω–∞—à —á–∞—Ç.", reply_markup=kb.start(user_id))

@srouter.message(get.name)
async def getname(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if len(message.text) <=10 and message.text != 'None':
        check_name = await rq.check_name(message.text)
        if not check_name:
            await rq.upd_name(message.from_user.id, message.text)
        else:
            await message.answer("–≠—Ç–æ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è/–ø—Å–µ–≤–¥–æ–Ω–∏–º (–Ω–µ –±–æ–ª–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤, –∞ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –±–∞–Ω –∑–∞ –º–∞—Ç/—Ä—É–≥–∞–Ω—å –∏ —Ç.–¥.):")
            await state.set_state(get.name)
            return
        await state.clear()
        await message.answer("üöÄ")
        await message.answer("–ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∫–ª–∞–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º.\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –≤—Å—Ç—É–ø–∞–π—Ç–µ –≤ –Ω–∞—à —á–∞—Ç.", reply_markup=kb.start(user_id))
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è/–ø—Å–µ–≤–¥–æ–Ω–∏–º (–Ω–µ –±–æ–ª–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤, –∞ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –±–∞–Ω –∑–∞ –º–∞—Ç/—Ä—É–≥–∞–Ω—å –∏ —Ç.–¥.):")
        await state.set_state(get.name)
        
@srouter.callback_query(F.data=="to_main")
async def to_main(callback: CallbackQuery):
    user_id = callback.from_user.id
    await callback.message.edit_text("–ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∫–ª–∞–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º.\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –≤—Å—Ç—É–ø–∞–π—Ç–µ –≤ –Ω–∞—à —á–∞—Ç.", reply_markup=kb.start(user_id))