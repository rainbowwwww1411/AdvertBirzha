import database.requests as rq
import os
from aiocryptopay import AioCryptoPay, Networks
import inlineKeyboards.profileikb as ikb
from aiogram import Router, Bot, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.deep_linking import create_start_link
from states import get
from ban import BansMiddleware
from antiflood import AntiFloodMiddleware

cryptopay = AioCryptoPay(
    token=os.getenv("CRYPTOPAY_TOKEN"),
    network=Networks.MAIN_NET
)

prouter = Router()
prouter.message.middleware(AntiFloodMiddleware())
prouter.callback_query.middleware(AntiFloodMiddleware())
prouter.callback_query.middleware(BansMiddleware())

@prouter.callback_query(F.data=="profile")
async def profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_data = await rq.get_user(user_id)
    rating = round(await rq.check_user_rating(user_id), 2)
    for user in user_data:
        await callback.message.edit_text(f"""<b>üìã –ü—Ä–æ—Ñ–∏–ª—å</b>

üó£ –í–∞—à–µ –∏–º—è: <code>{user.name}</code>
üôãüèª‚Äç‚ôÇÔ∏è –í–∞—à ID: <code>{user_id}</code>

üè¶ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{user.balance}</code>
‚≠êÔ∏è –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: <code>{rating}</code>

ü§ù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: <code>{user.deals_count}</code>
üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <code>{user.ref_count}</code>""", reply_markup=await ikb.profile(user_id, user.balance))
        
@prouter.message(F.text=="üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    user_data = await rq.get_user(user_id)
    rating = round(await rq.check_user_rating(user_id), 2)
    for user in user_data:
        await message.answer(f"""<b>üìã –ü—Ä–æ—Ñ–∏–ª—å</b>

üó£ –í–∞—à–µ –∏–º—è: <code>{user.name}</code>
üôãüèª‚Äç‚ôÇÔ∏è –í–∞—à ID: <code>{user_id}</code>

üè¶ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{user.balance}</code>
‚≠êÔ∏è –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: <code>{rating}</code>

ü§ù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: <code>{user.deals_count}</code>
üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <code>{user.ref_count}</code>""", reply_markup=await ikb.profile(user_id, user.balance))
        
@prouter.callback_query(F.data=="referal_system")
async def referal_system(callback: CallbackQuery, bot: Bot):
    link = await create_start_link(bot,str(callback.from_user.id), encode=True)
    await callback.message.edit_text(f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>{link}</code>\n\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ 1% –∑–∞ –≤—ã–≤–æ–¥—ã —Ä–µ—Ñ–µ—Ä–∞–ª–∞.", reply_markup=await ikb.back())
    
@prouter.callback_query(F.data=="top_up_balance")
async def top_up_balance(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=await ikb.pay_methods())

@prouter.callback_query(F.data.startswith("pay_"))
async def pay(callback: CallbackQuery, state: FSMContext):
    method = callback.data.split('_')[1]
    await state.update_data(method=method)
    if method=="CryptoBot":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ 100—Ä—É–±):", reply_markup=await ikb.back())
        await state.set_state(get.sum)
    elif method=="NowPayments":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ 500—Ä—É–±):", reply_markup=await ikb.back())
        await state.set_state(get.sum_nowp)
    elif method=="Stars":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ 100—Ä—É–±):", reply_markup=await ikb.back())
        await state.set_state(get.sum_stars)






