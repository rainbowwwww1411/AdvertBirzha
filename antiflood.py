from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery
from collections import defaultdict
import time
from inlineKeyboards.delete_message import delete_msg

class AntiFloodMiddleware(BaseMiddleware):
    def __init__(self, rate_limit=3, interval=2):
        self.user_timestamps = defaultdict(list)
        self.rate_limit = rate_limit
        self.interval = interval

    async def __call__(self, handler, event, data):
        user_id = event.from_user.id
        now = time.time()

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        self.user_timestamps[user_id] = [
            t for t in self.user_timestamps[user_id] 
            if now - t < self.interval
        ]

        if len(self.user_timestamps[user_id]) >= self.rate_limit:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
            if isinstance(event, Message):
                await event.answer(
                    "üõë –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–¥–æ–∂–¥–∏—Ç–µ.", 
                    reply_markup=await delete_msg()
                )
            elif isinstance(event, CallbackQuery):
                await event.answer(
                    "‚ö†Ô∏è –í—ã —Å–ª–∏—à–∫–æ–º –∞–∫—Ç–∏–≤–Ω—ã! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2 —Å–µ–∫—É–Ω–¥—ã",
                    show_alert=True
                )
            return

        self.user_timestamps[user_id].append(now)
        return await handler(event, data)
